apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    helm.sh/chart: orders-1.1.0
    app.kubernetes.io/name: orders
    app.kubernetes.io/instance: orders
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: orders
      app.kubernetes.io/instance: orders
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: orders
        app.kubernetes.io/instance: orders
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/component: service
                  app.kubernetes.io/instance: orders
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: service
              app.kubernetes.io/instance: orders
      serviceAccountName: orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
            - name: JAVA_OPTS
              value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
          envFrom:
            - secretRef:
                name: orders-rabbitmq
            - secretRef:
                name: orders-db
            - configMapRef:
                name: orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:1.1.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory